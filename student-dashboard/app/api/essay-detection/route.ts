import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';

// Initialize the OpenAI client with the API key from environment variables
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(request: NextRequest) {
  try {
    const { text, checkAI, checkCopyright } = await request.json();
    
    if (!text || typeof text !== 'string') {
      return NextResponse.json({ error: 'Invalid request. Text is required.' }, { status: 400 });
    }
    
    // Call OpenAI to analyze the text for AI patterns and copyright issues
    const response = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        {
          role: "system",
          content: `
            You are an academic integrity analysis tool that examines text for two potential issues:
            
            ${checkAI ? `1. AI-Generated Content: Analyze the text for patterns, consistency, style, and other markers that may indicate it was generated by an AI system like ChatGPT, Claude, or similar LLMs.` : ''}
            
            ${checkCopyright ? `${checkAI ? '2' : '1'}. Copyright/Plagiarism Issues: Evaluate if the text appears to be copied from other sources without proper attribution, shows signs of plagiarism, or contains potential copyright violations.` : ''}
            
            Provide an assessment that teachers can use to evaluate student work. Be thorough but fair in your analysis.
            
            Format your response as a JSON object matching this structure:
            {
              ${checkAI ? `"aiProbability": number, // 0-100 percentage probability that the text was AI-generated
              "aiAssessment": "string", // Detailed explanation of your AI detection assessment` : ''}
              ${checkAI && checkCopyright ? ',' : ''}
              ${checkCopyright ? `"copyrightIssues": {
                "detected": boolean,
                "explanation": "string",
                "potentialSources": ["string"] // Optional array of potential sources if detected
              }` : ''}
            }
          `
        },
        {
          role: "user",
          content: text
        }
      ],
      response_format: { type: "json_object" },
      temperature: 0.5,
      max_tokens: 2000,
    });

    const result = JSON.parse(response.choices[0].message.content || "{}");
    
    // Create a full response with default values for any missing fields
    const fullResponse = {
      aiProbability: checkAI ? result.aiProbability || 0 : 0,
      aiAssessment: checkAI ? result.aiAssessment || "No assessment available" : "AI detection was not requested",
      copyrightIssues: checkCopyright ? result.copyrightIssues || {
        detected: false,
        explanation: "No copyright issues detected",
        potentialSources: []
      } : {
        detected: false,
        explanation: "Copyright check was not requested"
      }
    };

    return NextResponse.json(fullResponse);
  } catch (error) {
    console.error('Error in essay detection API:', error);
    return NextResponse.json({ error: 'Failed to analyze essay' }, { status: 500 });
  }
} 